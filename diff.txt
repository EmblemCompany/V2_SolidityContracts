diff --git a/foundry.toml b/foundry.toml
index 25b918f..1bb6ecb 100644
--- a/foundry.toml
+++ b/foundry.toml
@@ -2,5 +2,14 @@
 src = "src"
 out = "out"
 libs = ["lib"]
+via_ir = true
+optimizer = true
+optimizer_runs = 200
 
-# See more config options https://github.com/foundry-rs/foundry/blob/master/crates/config/README.md#all-options
+[rpc_endpoints]
+localhost = "http://localhost:8545"
+
+[etherscan]
+mainnet = { key = "${ETHERSCAN_API_KEY}" }
+
+# See more config options https://github.com/foundry-rs/foundry/tree/master/config
diff --git a/lib/openzeppelin-contracts b/lib/openzeppelin-contracts
index 0643d17..69c8def 160000
--- a/lib/openzeppelin-contracts
+++ b/lib/openzeppelin-contracts
@@ -1 +1 @@
-Subproject commit 0643d17e8d9640df803c5d256c53d458c4c6008d
+Subproject commit 69c8def5f222ff96f2b5beff05dfba996368aa79
diff --git a/script/DeployDiamond.s.sol b/script/DeployDiamond.s.sol
index a4f7303..cf7f49e 100644
--- a/script/DeployDiamond.s.sol
+++ b/script/DeployDiamond.s.sol
@@ -2,12 +2,16 @@
 pragma solidity ^0.8.19;
 
 import "forge-std/Script.sol";
-import "../src/Diamond.sol";
-import "../src/facets/DiamondCutFacet.sol";
-import "../src/facets/DiamondLoupeFacet.sol";
-import "../src/facets/OwnershipFacet.sol";
-import "../src/facets/VaultFacet.sol";
-import "../src/interfaces/IDiamondCut.sol";
+import {Diamond} from "../src/Diamond.sol";
+import {IDiamondCut} from "../src/interfaces/IDiamondCut.sol";
+import {DiamondCutFacet} from "../src/facets/DiamondCutFacet.sol";
+import {DiamondLoupeFacet} from "../src/facets/DiamondLoupeFacet.sol";
+import {OwnershipFacet} from "../src/facets/OwnershipFacet.sol";
+import {VaultCoreFacet} from "../src/facets/VaultCoreFacet.sol";
+import {ClaimFacet} from "../src/facets/ClaimFacet.sol";
+import {MintFacet} from "../src/facets/MintFacet.sol";
+import {CallbackFacet} from "../src/facets/CallbackFacet.sol";
+import {InitializationFacet} from "../src/facets/InitializationFacet.sol";
 
 contract DeployDiamond is Script {
     function run() external {
@@ -18,13 +22,17 @@ contract DeployDiamond is Script {
         DiamondCutFacet diamondCutFacet = new DiamondCutFacet();
         DiamondLoupeFacet diamondLoupeFacet = new DiamondLoupeFacet();
         OwnershipFacet ownershipFacet = new OwnershipFacet();
-        VaultFacet vaultFacet = new VaultFacet();
+        VaultCoreFacet vaultCoreFacet = new VaultCoreFacet();
+        ClaimFacet claimFacet = new ClaimFacet();
+        MintFacet mintFacet = new MintFacet();
+        CallbackFacet callbackFacet = new CallbackFacet();
+        InitializationFacet initFacet = new InitializationFacet();
 
         // Deploy Diamond
         Diamond diamond = new Diamond(msg.sender, address(diamondCutFacet));
 
         // Build cut struct
-        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);
+        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](7);
 
         // DiamondLoupeFacet
         bytes4[] memory loupeSelectors = new bytes4[](5);
@@ -49,31 +57,89 @@ contract DeployDiamond is Script {
             functionSelectors: ownershipSelectors
         });
 
-        // VaultFacet
-        bytes4[] memory vaultSelectors = new bytes4[](8);
-        vaultSelectors[0] = VaultFacet.lockToken.selector;
-        vaultSelectors[1] = VaultFacet.unlockToken.selector;
-        vaultSelectors[2] = VaultFacet.updateTokenURI.selector;
-        vaultSelectors[3] = VaultFacet.isTokenLocked.selector;
-        vaultSelectors[4] = VaultFacet.tokenOwner.selector;
-        vaultSelectors[5] = VaultFacet.getTokenURI.selector;
-        vaultSelectors[6] = VaultFacet.balanceOf.selector;
-        vaultSelectors[7] = VaultFacet.totalSupply.selector;
+        // VaultCoreFacet
+        bytes4[] memory vaultCoreSelectors = new bytes4[](13);
+        vaultCoreSelectors[0] = VaultCoreFacet.lockVault.selector;
+        vaultCoreSelectors[1] = VaultCoreFacet.unlockVault.selector;
+        vaultCoreSelectors[2] = VaultCoreFacet.isVaultLocked.selector;
+        vaultCoreSelectors[3] = VaultCoreFacet.addWitness.selector;
+        vaultCoreSelectors[4] = VaultCoreFacet.removeWitness.selector;
+        vaultCoreSelectors[5] = VaultCoreFacet.setRecipientAddress.selector;
+        vaultCoreSelectors[6] = VaultCoreFacet.setQuoteContract.selector;
+        vaultCoreSelectors[7] = VaultCoreFacet.setMetadataBaseUri.selector;
+        vaultCoreSelectors[8] = VaultCoreFacet.registerContract.selector;
+        vaultCoreSelectors[9] = VaultCoreFacet.unregisterContract.selector;
+        vaultCoreSelectors[10] = VaultCoreFacet.getRegisteredContractsOfType.selector;
+        vaultCoreSelectors[11] = VaultCoreFacet.isRegistered.selector;
+        vaultCoreSelectors[12] = VaultCoreFacet.version.selector;
         cut[2] = IDiamondCut.FacetCut({
-            facetAddress: address(vaultFacet),
+            facetAddress: address(vaultCoreFacet),
             action: IDiamondCut.FacetCutAction.Add,
-            functionSelectors: vaultSelectors
+            functionSelectors: vaultCoreSelectors
+        });
+
+        // ClaimFacet
+        bytes4[] memory claimSelectors = new bytes4[](2);
+        claimSelectors[0] = ClaimFacet.claim.selector;
+        claimSelectors[1] = ClaimFacet.claimWithSignedPrice.selector;
+        cut[3] = IDiamondCut.FacetCut({
+            facetAddress: address(claimFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: claimSelectors
+        });
+
+        // MintFacet
+        bytes4[] memory mintSelectors = new bytes4[](2);
+        mintSelectors[0] = MintFacet.buyWithSignedPrice.selector;
+        mintSelectors[1] = MintFacet.buyWithQuote.selector;
+        cut[4] = IDiamondCut.FacetCut({
+            facetAddress: address(mintFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: mintSelectors
+        });
+
+        // CallbackFacet
+        bytes4[] memory callbackSelectors = new bytes4[](6);
+        callbackSelectors[0] = CallbackFacet.executeCallbacks.selector;
+        callbackSelectors[1] = CallbackFacet.registerCallback.selector;
+        callbackSelectors[2] = CallbackFacet.registerWildcardCallback.selector;
+        callbackSelectors[3] = CallbackFacet.hasCallback.selector;
+        callbackSelectors[4] = CallbackFacet.unregisterCallback.selector;
+        callbackSelectors[5] = CallbackFacet.toggleAllowCallbacks.selector;
+        cut[5] = IDiamondCut.FacetCut({
+            facetAddress: address(callbackFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: callbackSelectors
+        });
+
+        // InitializationFacet
+        bytes4[] memory initSelectors = new bytes4[](4);
+        initSelectors[0] = InitializationFacet.initialize.selector;
+        initSelectors[1] = InitializationFacet.isInitialized.selector;
+        initSelectors[2] = InitializationFacet.getInterfaceIds.selector;
+        initSelectors[3] = InitializationFacet.getConfiguration.selector;
+        cut[6] = IDiamondCut.FacetCut({
+            facetAddress: address(initFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: initSelectors
         });
 
         // Add facets to diamond
         IDiamondCut(address(diamond)).diamondCut(cut, address(0), "");
 
+        // Initialize the vault
+        InitializationFacet(address(diamond)).initialize(msg.sender);
+
         vm.stopBroadcast();
 
         console.log("Diamond deployed at:", address(diamond));
         console.log("DiamondCutFacet deployed at:", address(diamondCutFacet));
         console.log("DiamondLoupeFacet deployed at:", address(diamondLoupeFacet));
         console.log("OwnershipFacet deployed at:", address(ownershipFacet));
-        console.log("VaultFacet deployed at:", address(vaultFacet));
+        console.log("VaultCoreFacet deployed at:", address(vaultCoreFacet));
+        console.log("ClaimFacet deployed at:", address(claimFacet));
+        console.log("MintFacet deployed at:", address(mintFacet));
+        console.log("CallbackFacet deployed at:", address(callbackFacet));
+        console.log("InitializationFacet deployed at:", address(initFacet));
     }
 }
diff --git a/test/DiamondVault.t.sol b/test/DiamondVault.t.sol
index e1de1e1..9466ebd 100644
--- a/test/DiamondVault.t.sol
+++ b/test/DiamondVault.t.sol
@@ -2,19 +2,28 @@
 pragma solidity ^0.8.19;
 
 import "forge-std/Test.sol";
-import "../src/Diamond.sol";
-import "../src/facets/DiamondCutFacet.sol";
-import "../src/facets/DiamondLoupeFacet.sol";
-import "../src/facets/OwnershipFacet.sol";
-import "../src/facets/VaultFacet.sol";
-import "../src/interfaces/IDiamondCut.sol";
+import {Diamond} from "../src/Diamond.sol";
+import {IDiamondCut} from "../src/interfaces/IDiamondCut.sol";
+import {DiamondCutFacet} from "../src/facets/DiamondCutFacet.sol";
+import {DiamondLoupeFacet} from "../src/facets/DiamondLoupeFacet.sol";
+import {OwnershipFacet} from "../src/facets/OwnershipFacet.sol";
+import {VaultCoreFacet} from "../src/facets/VaultCoreFacet.sol";
+import {ClaimFacet} from "../src/facets/ClaimFacet.sol";
+import {MintFacet} from "../src/facets/MintFacet.sol";
+import {CallbackFacet} from "../src/facets/CallbackFacet.sol";
+import {InitializationFacet} from "../src/facets/InitializationFacet.sol";
+import {IHandlerCallback} from "../src/interfaces/IHandlerCallback.sol";
 
 contract DiamondVaultTest is Test {
     Diamond diamond;
     DiamondCutFacet diamondCutFacet;
     DiamondLoupeFacet diamondLoupeFacet;
     OwnershipFacet ownershipFacet;
-    VaultFacet vaultFacet;
+    VaultCoreFacet vaultCoreFacet;
+    ClaimFacet claimFacet;
+    MintFacet mintFacet;
+    CallbackFacet callbackFacet;
+    InitializationFacet initFacet;
 
     address owner = address(this);
     address user1 = address(0x1);
@@ -25,13 +34,17 @@ contract DiamondVaultTest is Test {
         diamondCutFacet = new DiamondCutFacet();
         diamondLoupeFacet = new DiamondLoupeFacet();
         ownershipFacet = new OwnershipFacet();
-        vaultFacet = new VaultFacet();
+        vaultCoreFacet = new VaultCoreFacet();
+        claimFacet = new ClaimFacet();
+        mintFacet = new MintFacet();
+        callbackFacet = new CallbackFacet();
+        initFacet = new InitializationFacet();
 
         // Deploy Diamond
         diamond = new Diamond(owner, address(diamondCutFacet));
 
         // Build cut struct
-        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);
+        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](7);
 
         // DiamondLoupeFacet
         bytes4[] memory loupeSelectors = new bytes4[](5);
@@ -56,83 +69,141 @@ contract DiamondVaultTest is Test {
             functionSelectors: ownershipSelectors
         });
 
-        // VaultFacet
-        bytes4[] memory vaultSelectors = new bytes4[](8);
-        vaultSelectors[0] = VaultFacet.lockToken.selector;
-        vaultSelectors[1] = VaultFacet.unlockToken.selector;
-        vaultSelectors[2] = VaultFacet.updateTokenURI.selector;
-        vaultSelectors[3] = VaultFacet.isTokenLocked.selector;
-        vaultSelectors[4] = VaultFacet.tokenOwner.selector;
-        vaultSelectors[5] = VaultFacet.getTokenURI.selector;
-        vaultSelectors[6] = VaultFacet.balanceOf.selector;
-        vaultSelectors[7] = VaultFacet.totalSupply.selector;
+        // VaultCoreFacet
+        bytes4[] memory vaultCoreSelectors = new bytes4[](13);
+        vaultCoreSelectors[0] = VaultCoreFacet.lockVault.selector;
+        vaultCoreSelectors[1] = VaultCoreFacet.unlockVault.selector;
+        vaultCoreSelectors[2] = VaultCoreFacet.isVaultLocked.selector;
+        vaultCoreSelectors[3] = VaultCoreFacet.addWitness.selector;
+        vaultCoreSelectors[4] = VaultCoreFacet.removeWitness.selector;
+        vaultCoreSelectors[5] = VaultCoreFacet.setRecipientAddress.selector;
+        vaultCoreSelectors[6] = VaultCoreFacet.setQuoteContract.selector;
+        vaultCoreSelectors[7] = VaultCoreFacet.setMetadataBaseUri.selector;
+        vaultCoreSelectors[8] = VaultCoreFacet.registerContract.selector;
+        vaultCoreSelectors[9] = VaultCoreFacet.unregisterContract.selector;
+        vaultCoreSelectors[10] = VaultCoreFacet.getRegisteredContractsOfType.selector;
+        vaultCoreSelectors[11] = VaultCoreFacet.isRegistered.selector;
+        vaultCoreSelectors[12] = VaultCoreFacet.version.selector;
         cut[2] = IDiamondCut.FacetCut({
-            facetAddress: address(vaultFacet),
+            facetAddress: address(vaultCoreFacet),
             action: IDiamondCut.FacetCutAction.Add,
-            functionSelectors: vaultSelectors
+            functionSelectors: vaultCoreSelectors
+        });
+
+        // ClaimFacet
+        bytes4[] memory claimSelectors = new bytes4[](2);
+        claimSelectors[0] = ClaimFacet.claim.selector;
+        claimSelectors[1] = ClaimFacet.claimWithSignedPrice.selector;
+        cut[3] = IDiamondCut.FacetCut({
+            facetAddress: address(claimFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: claimSelectors
+        });
+
+        // MintFacet
+        bytes4[] memory mintSelectors = new bytes4[](2);
+        mintSelectors[0] = MintFacet.buyWithSignedPrice.selector;
+        mintSelectors[1] = MintFacet.buyWithQuote.selector;
+        cut[4] = IDiamondCut.FacetCut({
+            facetAddress: address(mintFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: mintSelectors
+        });
+
+        // CallbackFacet
+        bytes4[] memory callbackSelectors = new bytes4[](6);
+        callbackSelectors[0] = CallbackFacet.executeCallbacks.selector;
+        callbackSelectors[1] = CallbackFacet.registerCallback.selector;
+        callbackSelectors[2] = CallbackFacet.registerWildcardCallback.selector;
+        callbackSelectors[3] = CallbackFacet.hasCallback.selector;
+        callbackSelectors[4] = CallbackFacet.unregisterCallback.selector;
+        callbackSelectors[5] = CallbackFacet.toggleAllowCallbacks.selector;
+        cut[5] = IDiamondCut.FacetCut({
+            facetAddress: address(callbackFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: callbackSelectors
+        });
+
+        // InitializationFacet
+        bytes4[] memory initSelectors = new bytes4[](4);
+        initSelectors[0] = InitializationFacet.initialize.selector;
+        initSelectors[1] = InitializationFacet.isInitialized.selector;
+        initSelectors[2] = InitializationFacet.getInterfaceIds.selector;
+        initSelectors[3] = InitializationFacet.getConfiguration.selector;
+        cut[6] = IDiamondCut.FacetCut({
+            facetAddress: address(initFacet),
+            action: IDiamondCut.FacetCutAction.Add,
+            functionSelectors: initSelectors
         });
 
         // Add facets to diamond
         IDiamondCut(address(diamond)).diamondCut(cut, address(0), "");
+
+        // Initialize the vault
+        InitializationFacet(address(diamond)).initialize(owner);
     }
 
-    function testLockToken() public {
-        VaultFacet(address(diamond)).lockToken(1, "ipfs://token1");
+    function testInitialization() public {
+        assertTrue(InitializationFacet(address(diamond)).isInitialized());
+        (string memory baseUri,,,,) = InitializationFacet(address(diamond)).getConfiguration();
+        assertEq(baseUri, "https://v2.emblemvault.io/meta/");
+    }
 
-        assertTrue(VaultFacet(address(diamond)).isTokenLocked(1));
-        assertEq(VaultFacet(address(diamond)).tokenOwner(1), address(this));
-        assertEq(VaultFacet(address(diamond)).getTokenURI(1), "ipfs://token1");
-        assertEq(VaultFacet(address(diamond)).balanceOf(address(this)), 1);
-        assertEq(VaultFacet(address(diamond)).totalSupply(), 1);
+    function testOwnership() public {
+        assertEq(OwnershipFacet(address(diamond)).owner(), owner);
     }
 
-    function testUnlockToken() public {
-        VaultFacet(address(diamond)).lockToken(1, "ipfs://token1");
-        VaultFacet(address(diamond)).unlockToken(1);
+    function testVaultLocking() public {
+        address mockNft = address(0x123);
+        uint256 tokenId = 1;
 
-        assertFalse(VaultFacet(address(diamond)).isTokenLocked(1));
-        assertEq(VaultFacet(address(diamond)).tokenOwner(1), address(0));
-        assertEq(VaultFacet(address(diamond)).balanceOf(address(this)), 0);
-        assertEq(VaultFacet(address(diamond)).totalSupply(), 0);
-    }
+        // Register mock NFT contract
+        VaultCoreFacet(address(diamond)).registerContract(mockNft, 1);
 
-    function testUpdateTokenURI() public {
-        VaultFacet(address(diamond)).lockToken(1, "ipfs://token1");
-        VaultFacet(address(diamond)).updateTokenURI(1, "ipfs://token1-updated");
+        // Lock vault
+        VaultCoreFacet(address(diamond)).lockVault(mockNft, tokenId);
+        assertTrue(VaultCoreFacet(address(diamond)).isVaultLocked(mockNft, tokenId));
 
-        assertEq(VaultFacet(address(diamond)).getTokenURI(1), "ipfs://token1-updated");
+        // Unlock vault
+        VaultCoreFacet(address(diamond)).unlockVault(mockNft, tokenId);
+        assertFalse(VaultCoreFacet(address(diamond)).isVaultLocked(mockNft, tokenId));
     }
 
-    function testFailUnlockTokenNotOwner() public {
-        VaultFacet(address(diamond)).lockToken(1, "ipfs://token1");
+    function testFailLockUnregisteredContract() public {
+        address mockNft = address(0x123);
+        uint256 tokenId = 1;
 
-        vm.prank(user1);
-        VaultFacet(address(diamond)).unlockToken(1);
+        VaultCoreFacet(address(diamond)).lockVault(mockNft, tokenId);
     }
 
-    function testFailLockTokenTwice() public {
-        VaultFacet(address(diamond)).lockToken(1, "ipfs://token1");
-        VaultFacet(address(diamond)).lockToken(1, "ipfs://token1");
-    }
+    function testWitnessManagement() public {
+        address witness = address(0x456);
 
-    function testFailUpdateTokenURINotOwner() public {
-        VaultFacet(address(diamond)).lockToken(1, "ipfs://token1");
+        // Add witness
+        VaultCoreFacet(address(diamond)).addWitness(witness);
 
-        vm.prank(user1);
-        VaultFacet(address(diamond)).updateTokenURI(1, "ipfs://token1-updated");
+        // Remove witness
+        VaultCoreFacet(address(diamond)).removeWitness(witness);
     }
 
-    function testOwnership() public {
-        assertEq(OwnershipFacet(address(diamond)).owner(), address(this));
+    function testContractRegistration() public {
+        address mockContract = address(0x789);
+        uint256 contractType = 1;
+
+        // Register contract
+        VaultCoreFacet(address(diamond)).registerContract(mockContract, contractType);
+        assertTrue(VaultCoreFacet(address(diamond)).isRegistered(mockContract, contractType));
 
-        OwnershipFacet(address(diamond)).transferOwnership(user1);
-        assertEq(OwnershipFacet(address(diamond)).owner(), user1);
+        // Get registered contracts
+        address[] memory contracts = VaultCoreFacet(address(diamond)).getRegisteredContractsOfType(contractType);
+        assertEq(contracts.length, 1);
+        assertEq(contracts[0], mockContract);
     }
 
-    function testDiamondCut() public view {
+    function testDiamondCut() public {
         // Test that all facets were properly added
         address[] memory facetAddresses = DiamondLoupeFacet(address(diamond)).facetAddresses();
-        assertEq(facetAddresses.length, 4); // DiamondCut, DiamondLoupe, Ownership, and Vault facets
+        assertEq(facetAddresses.length, 8); // All facets including DiamondCut
 
         // Verify DiamondCutFacet functions
         assertEq(
@@ -150,10 +221,5 @@ contract DiamondVaultTest is Test {
         assertEq(
             DiamondLoupeFacet(address(diamond)).getFacetAddress(OwnershipFacet.owner.selector), address(ownershipFacet)
         );
-
-        // Verify VaultFacet functions
-        assertEq(
-            DiamondLoupeFacet(address(diamond)).getFacetAddress(VaultFacet.lockToken.selector), address(vaultFacet)
-        );
     }
 }
